// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]
  orders    Order[]

  @@map("Users")
}

model Product {
  productId    Int      @id @default(autoincrement())
  name         String   @unique
  description  String
  price        Float
  stock        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       OrderProduct[]
  carts        CartProduct[]

  @@map("Products")
}

model Order {
  orderId    Int      @id @default(autoincrement())
  orderDate  DateTime @default(now())
  status     String
  userId     Int
  user       User     @relation(fields: [userId], references: [userId])
  products   OrderProduct[]

  @@map("Orders")
}

model Cart {
  cartId    Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [userId])
  products  CartProduct[]

  @@map("Carts")
}

// Join table for many-to-many relationship between Order and Product
model OrderProduct {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [orderId])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [productId])
  productId Int

  // To ensure the combination of orderId and productId is unique
  @@unique([orderId, productId])
}

// Join table for many-to-many relationship between Cart and Product
model CartProduct {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [cartId])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [productId])
  productId Int
  qty       Int      @default(1)  // Add qty attribute with a default value of 1

  // To ensure the combination of cartId and productId is unique
  @@unique([cartId, productId])
}
